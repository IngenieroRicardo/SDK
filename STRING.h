/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "STRING.go"

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdarg.h>

typedef struct {
    char** data;
    int count;
} StringArray;

static char* Concat(char *first, ...) {
    va_list args;
    char *token;
    size_t total_len = 0;
    
    // 1. Calcular longitud total necesaria
    va_start(args, first);
    token = first;
    while(token != NULL) {
        total_len += strlen(token);
        token = va_arg(args, char*);
    }
    va_end(args);
    
    // 2. Reservar memoria (incluyendo espacio para \0)
    char *result = malloc(total_len + 1);
    if(result == NULL) return NULL;
    result[0] = '\0';
    
    // 3. Concatenar todos los strings
    va_start(args, first);
    token = first;
    while(token != NULL) {
        strcat(result, token);
        token = va_arg(args, char*);
    }
    va_end(args);
    
    return result;
}
#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _WIN32 
extern __declspec(dllexport) int Atoi(char* s);
extern __declspec(dllexport) double Atof(char* s);
extern __declspec(dllexport) char* Itoa(int n);
extern __declspec(dllexport) char* Ftoa(double f, int precision);
extern __declspec(dllexport) int ParseBool(char* s);
extern __declspec(dllexport) int StrLen(char* s);
extern __declspec(dllexport) char* Substring(char* s, int start, int end);
extern __declspec(dllexport) int IsNumeric(char* s);
extern __declspec(dllexport) char* ConcatAll(char** strs, int count);
extern __declspec(dllexport) char* ToUpperCase(char* s);
extern __declspec(dllexport) char* ToLowerCase(char* s);
extern __declspec(dllexport) char* Trim(char* s);
extern __declspec(dllexport) char* ReplaceAll(char* s, char* old, char* new);
extern __declspec(dllexport) StringArray NewStringArray(int size);
extern __declspec(dllexport) void SetStringArrayValue(StringArray arr, int index, char* value);
extern __declspec(dllexport) char* GetStringArrayValue(StringArray arr, int index);
extern __declspec(dllexport) int GetStringArraySize(StringArray arr);
extern __declspec(dllexport) char* JoinStringArray(StringArray arr, char* delimiter);
extern __declspec(dllexport) StringArray Split(char* s, char* sep);
extern __declspec(dllexport) void FreeStringArray(StringArray arr);
extern __declspec(dllexport) void FreeString(char* s);
#else 
extern int Atoi(char* s);
extern double Atof(char* s);
extern char* Itoa(int n);
extern char* Ftoa(double f, int precision);
extern int ParseBool(char* s);
extern int StrLen(char* s);
extern char* Substring(char* s, int start, int end);
extern int IsNumeric(char* s);
extern char* ConcatAll(char** strs, int count);
extern char* ToUpperCase(char* s);
extern char* ToLowerCase(char* s);
extern char* Trim(char* s);
extern char* ReplaceAll(char* s, char* old, char* new);
extern StringArray NewStringArray(int size);
extern void SetStringArrayValue(StringArray arr, int index, char* value);
extern char* GetStringArrayValue(StringArray arr, int index);
extern int GetStringArraySize(StringArray arr);
extern char* JoinStringArray(StringArray arr, char* delimiter);
extern StringArray Split(char* s, char* sep);
extern void FreeStringArray(StringArray arr);
extern void FreeString(char* s);
#endif

#ifdef __cplusplus
}
#endif
